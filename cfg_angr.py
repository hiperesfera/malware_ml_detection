#!/usr/bin/env python3

import argparse
import os
import angr
from angrutils import plot_cfg
import netlsd

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Generate a CFG from a binary (emulated or fast) and analyze it with NetLSD (heat & wave)."
    )
    parser.add_argument(
        "binary_path",
        help="Path to the target binary"
    )
    parser.add_argument(
        "-m", "--mode",
        choices=["emulated", "fast"],
        default="emulated",
        help="Analysis mode (emulated or fast). Default is 'emulated'."
    )
    parser.add_argument(
        "--plot",
        action="store_true",
        help="If set, output a minimal CFG PNG (using angrutils)."
    )
    return parser.parse_args()


def generate_cfg(binary_path, mode):
    """
    Load the binary with angr, locate 'main' (or fallback to entry),
    then generate either CFGEmulated or CFGFast.
    """
    proj = angr.Project(binary_path, auto_load_libs=False)

    # Locate 'main', else entry point
    main_symbol = proj.loader.main_object.get_symbol("main")
    if main_symbol is None:
        print("[*] 'main' not found. Falling back to entry point.")
        main_addr = proj.loader.main_object.entry
    else:
        main_addr = main_symbol.rebased_addr

    if mode == "emulated":
        print("[*] Using CFGEmulated analysis...")
        start_state = proj.factory.blank_state(addr=main_addr)
        cfg = proj.analyses.CFGEmulated(
            starts=[main_addr],
            initial_state=start_state,
            fail_fast=True
        )
    else:
        print("[*] Using CFGFast analysis...")
        cfg = proj.analyses.CFGFast()

    return cfg


def compute_netlsd_descriptors(cfg):
    """
    Extract the NetworkX graph from the angr CFG
    and compute two NetLSD descriptors:
      - Heat
      - Wave
    Returns (heat_descriptor, wave_descriptor).
    """
    nx_graph = cfg.graph  # This is a networkx.DiGraph
    
    # 1) Heat kernel descriptor
    desc_heat = netlsd.heat(nx_graph)  # using defaults
    
    # 2) Wave kernel descriptor
    desc_wave = netlsd.wave(nx_graph)  # using defaults
    
    return desc_heat, desc_wave


def plot_minimal_cfg(cfg, binary_path, mode):
    """
    Plot a minimal CFG (no instructions, no debug info) using angrutils.
    """
    base_name = os.path.basename(binary_path)
    base_name = os.path.splitext(base_name)[0]  # remove extension
    output_prefix = f"{base_name}_{mode}_minimal"

    print(f"[*] Generating minimal CFG -> {output_prefix}.png")
    plot_cfg(
        cfg,
        output_prefix,
        asminst=False,
        vexinst=False,
        debug_info=False,
        remove_imports=True,
        remove_path_terminator=True,
        format='png'
    )
    print(f"[*] Created {output_prefix}.png")


def main():
    args = parse_arguments()

    # 1) Generate the CFG
    cfg = generate_cfg(args.binary_path, args.mode)

    # 2) Compute NetLSD descriptors (heat & wave)
    print("[*] Computing NetLSD descriptors (heat & wave)...")
    desc_heat, desc_wave = compute_netlsd_descriptors(cfg)
    print("[*] NetLSD heat descriptor:", len(desc_heat))
    print(desc_heat)
    print("[*] NetLSD wave descriptor:", len(desc_wave))
    print(desc_wave)

    # 3) (Optional) Plot the minimal CFG
    if args.plot:
        plot_minimal_cfg(cfg, args.binary_path, args.mode)

    print("[*] Done.")


if __name__ == "__main__":
    main()
